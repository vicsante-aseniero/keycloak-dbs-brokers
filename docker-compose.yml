version: '3.9'
services:
  mongodb:
    container_name: mongodb-dev    
    image: mongo:latest # Use the latest MongoDB image. For more info, see https://aka.ms/dev-containers-mongodb.
    user: "root"
    environment:
      MONGO_INITDB_ROOT_USERNAME: devuser
      MONGO_INITDB_ROOT_PASSWORD: jajnav5@
    networks:
      - backend_network
    ports:
      - "27017:27017"
    restart: unless-stopped
    volumes:
      - mongo_data:/var/opt/mongodb/data

    # Add "forwardPorts": ["27017"] to **devcontainer.json** to forward MongoDB locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  sqlserver:
    container_name: sqlserver-dev
    image: mcr.microsoft.com/mssql/server:2022-latest
    user: "root"
    environment:
      SA_PASSWORD: jajnav5@
      ACCEPT_EULA: Y
      MSSQL_PID: "Developer" # Specifies Developer Edition
    ports:
      - "1433:1433"
    networks:
      - backend_network
    restart: unless-stopped
    volumes:
      - mssql_data:/var/opt/mssql/data
  
    # Add "forwardPorts": ["db:1433"] to **devcontainer.json** to forward MSSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  postgres:
    container_name: postgres-dev
    image: postgres:latest
    user: "root"
    env_file:      
      - .env # Ensure that the variables in .env match the same variables in devcontainer.json
    ports:
      - "5432:5432" # Optional: Expose PostgreSQL port if you need to access it directly    
    networks:
      - backend_network
    restart: unless-stopped
    volumes:      
      - ./init:/docker-entrypoint-initdb.d
      - postgres_data:/var/opt/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak_user -d keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5

    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  keycloak:
    container_name: keycloak-dev
    image: quay.io/keycloak/keycloak:latest
    user: "root"
    environment:
      # Database connection settings
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: jajnav5@
      KC_DB_SCHEMA: public
      # Keycloak admin user
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: jajnav5@
      # Hostname settings
      KC_HOSTNAME: http://localhost:9000      
      KC_HTTP_ENABLED: "true" # Enable HTTP for local development, use HTTPS in production
      # Production mode (recommended)
      KC_FEATURES: web-authn,token-exchange,client-policies,admin-fine-grained-authz,scripts,docker
      KC_HEALTH_ENABLED: "true" # Enable health endpoints
      KC_METRICS_ENABLED: "true" # Enable metrics endpoints
      KC_PROXY: none # Tells Keycloak how to trust proxy headers.
    ports:
      - "9000:8080"
    networks:
      - backend_network
    restart: unless-stopped
    volumes:
      - keycloak_data:/var/opt/keycloak/data
    depends_on:
      postgres:
        condition: service_healthy # Ensure PostgreSQL is healthy before starting Keycloak
    command:
      - start-dev # Use 'start' for production, 'start-dev' for development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/realms/master"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Add "forwardPorts": ["9000"] to **devcontainer.json** to forward Keycloak locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  redis:
    container_name: redis-dev
    image: redis:latest
    user: "root"
    environment:
      REDIS_PASSWORD: jajnav5@
    ports:
      - "6379:6379"
    networks:
      - backend_network
    restart: unless-stopped
    volumes:
      - redis_data:/var/opt/redis/data

    # Add "forwardPorts": ["6379"] to **devcontainer.json** to forward Redis locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  rabbitmq:
    container_name: rabbitmq-dev
    image: rabbitmq:3-management
    user: "root"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: jajnav5@
    ports:
      - "5672:5672"   # RabbitMQ message broker
      - "15672:15672" # RabbitMQ management UI
    networks:
      - backend_network
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/opt/rabbitmq/data

    # Add "forwardPorts": ["5672", "15672"] to **devcontainer.json** to forward RabbitMQ locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)
  localstack:
    container_name: localstack_main  # Give it a static name
    image: localstack/localstack:latest
    user: "root"    
    environment:
      - ACTIVATE_PRO=0 # Ensure Community version is used
      - SERVICES=all # Start all services (default). Modify as needed.
      #- SERVICES=apigateway,s3,sqs,sns,stepfunctions,events,ec2,lambda,kms,iam,acm,transcribe,dynamodb,cloudformation,logs,cloudwatch,ssm,ses,kinesis,route53,opensearch # Set SERVICES to activate free services (S3, SQS, Lambda, DynamoDB, SNS, EC2, etc.)
      - LOCALSTACK_HOST=localstack # Use this hostname to connect from the host
      - DOCKER_HOST=unix:///var/run/docker.sock # Required for certain LocalStack features
      - DEBUG=1 # Enable debug logs for troubleshooting
    ports:
      - "4566:4566" # Expose port for the host
    networks:
      - backend_network # Define a network for the Dev Container to join
    restart: unless-stopped
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack-data:/var/lib/localstack" # For persistence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Add "forwardPorts": ["4566"] to **devcontainer.json** to forward LocalStack locally.
    # (Adding the "ports" property to this file will not forward from a Codespace
    # Note: LocalStack can be resource-intensive; adjust your Codespace resources if needed.
    # See
    # more details at
    # https://github.com/localstack/localstack-docker/blob/master/README.md
    # and https://aka.ms/vscode-dev-containers/localstack.
    #)

networks:
  frontend_network:
    driver: bridge # Or overlay, etc.
  backend_network:
    driver: bridge

volumes:
  keycloak_data:
  mongo_data:
  mssql_data:
  postgres_data:
  redis_data:
  rabbitmq_data: